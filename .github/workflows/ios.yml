name: iOS starter workflow

on:
  push:
    branches: [ "reference-ios-app-dev" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - uses: ruby/setup-ruby@v1

      - name: Install Bundler
        run: gem intall bundler

      - name: Install gems
        run: bundle install
      
      - name: Install Dependencies
        run: pod install
      
      - name: Check Xcode version
        run: /usr/bin/xcodebuild -version

      - name: Build IPA
        run: |
          xcodebuild \
            -workspace referencemsal.xcworkspace \
            -scheme referencemsal \
            -configuration Release \
            -destination "generic/platform=iOS" \
            -archivePath referencemsal.xcarchive

      - name: Upload IPA
        uses: actions/upload-artifact@v2
        with:
          name: YourApp
          path: YourApp.ipa

      # - name: Set Default Scheme
      #   run: |
      #     scheme_list=$(xcodebuild -list -json | tr -d "\n")
      #     default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
      #     echo $default | cat >default
      #     echo Using default scheme: $default

      # - name: Build
      #   env:
      #     scheme: ${{ 'default' }}
      #     platform: ${{ 'iOS Simulator' }}
      #   run: |
      #     # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
      #     device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
      #     if [ $scheme = default ]; then scheme=$(cat default); fi
      #     if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
      #     file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
      #     xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
      
      # - name: Test
      #   env:
      #     scheme: ${{ 'default' }}
      #     platform: ${{ 'iOS Simulator' }}
      #   run: |
      #     # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
      #     device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
      #     if [ $scheme = default ]; then scheme=$(cat default); fi
      #     if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
      #     file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
      #     xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
